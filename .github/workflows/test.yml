name: test

on: [push, pull_request]

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        cc: ["gcc", "clang"]

    runs-on: ubuntu-24.04

    steps:
    - uses: actions/checkout@master

    - name: install dependencies
      run: sudo apt-get update && sudo apt-get install -y libssl-dev

    - name: build openresty-luajit2
      run: |
        git clone https://github.com/openresty/luajit2.git
        cd luajit2
        make -j CC=${{ matrix.cc }} TARGET_XLIBS="-lm -ldl -lssl -lcrypto" TARGET_LDFLAGS="-Wl,--no-as-needed,-E"
        make -j install PREFIX=${{ github.workspace }}/.lua

    - uses: leafo/gh-actions-luarocks@master

    - name: prepare encrypt file
      run: |
        openssl aes-256-cbc -p -nosalt -pbkdf2 -pass pass:123456 -in ./tests/example2.json -out ./tests/example2.json.enc

    # - name: runtests.sh
    #   env:
    #     CC: ${{ matrix.cc }}
    #   run: |
    #     LUA_DIR=.lua ${{ matrix.runtestEnv }} ./runtests.sh PREFIX=.lua ${{ matrix.runtestArgs }}

    - name: setup prove
      env:
        CC: ${{ matrix.cc }}
      run: |
        make PREFIX=.lua ${{ matrix.runtestArgs }}
        sudo apt-get update
        sudo apt-get install -q valgrind libipc-run3-perl cppcheck cpanminus
        sudo cpanm --notest Test::Base Test::LongString

    # - name: cppcheck
    #   run: cppcheck -i .lua/ -i .install/ -i dtoa.c --force --error-exitcode=1 --enable=warning --inline-suppr .

    - name: build lua-cjson
      run: |
        make -j2 CCDEBUG=-g Q= PREFIX= CC=gcc  TARGET_XLIBS="-lm -ldl -lssl -lcrypto" TARGET_XLDFLAGS="-Wl,--no-as-needed,-E"

    - name: prove
      run: |
        cd .lua/bin
        export PATH=$PWD:$PATH
        cd ../../
        LUA_BIN=luajit prove -Itests tests

    # - name: prove (valgrind)
    #   run: LUA_BIN=lua TEST_LUA_USE_VALGRIND=1 prove -Itests tests

    # - name: build
    #   run: |
    #     luarocks make

